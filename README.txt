This is a Python Bot that plays the free Google's Minesweeper puzzle game. The main file to launch the bot is called SweepBot.py (please have the other files in the same folder).

1) Please make sure the browser window of the game is maximized, because I noticed the image recognition isn't always able to identify the images correctly perhaps because they get slightly distorted.
2) Please manually select ‘Hard’ mode from the top left dropdown combo box within the game.
3) I'm using Python 3.9 for this build, but you're welcome to try on the newer builds if all of the external modules support it.

This bot was designed to continue to play game after game as long as it can solve the current game to completion, but for me (on my system) this feature only works on Firefox, it should however play the initial open game on Chrome (at least it does on my system before getting lost looking for the play again or try again buttons). I think this is because I grabbed these anchor/button images via Firefox and perhaps Chrome's are a bit different for the image recognition to work. There are two workarounds for now, until a dynamic or global solution can be incorporated: lower the image recognition setting (this may take some finagling as unrelated images maybe become false positives, details on how to accomplish this are on PyPi.org or the developer’s page for the ImageSearch module - https://pypi.org/project/python-imagesearch/), or grab screenshots of the Play Again and Try Again buttons in Chrome.

There is room for improvement - most importantly additional probability logic should be added or a better approach implemented and current logic should be improved and built up. As for now I'm more or less using 1 to 3 levels (if I remember correctly) to calculate local probability and merging similar probability cases in the code where I noticed patters and opportunity for a one-fits-multiple rule but this has slightly backfired in some cases as it makes it more difficult to incorporate new cases, so perhaps consolidation and merging should be done as a last step during the optimization phase once enough testing and data gathering has been accomplished. Additionally, an algorithm for calculating the potential arrangements of the remaining few mines on a field that cannot be solved with local probabilities should be developed to solve puzzles where only one arrangement fits the remaining mines in the remaining unopened fields (I think this should be a fun project, time permitting). For example, say you have 3 mines left and 8 fields, perhaps there’s only one possible arrangement, and thus guessing can be avoided.
There are, however, cases when guessing is inevitable, so perhaps guessing could be incorporated into the bot - perhaps it could even keep track and build a data file of where the mines were located during guessing to see if there is any pattern or higher likelihood of guessing one way over another build into Google's code. Although there are comments online that Google's Minesweeper doesn't require guessing, and though it may appear so in most cases, I've encountered games where guessing was inevitable, such as 2 fields with 1 mine.
